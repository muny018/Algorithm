//BOJ17822 원판돌리기 210926

//문제
//

//해설
//

#define _CRT_SECURE_NO_WARNINGS
#define MAX 52

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct Info
{
	int x;
	int nDir;
	int k;
};

vector <Info> Vec;
int N, M, T;
bool bVisited[MAX][MAX] = { 0 };
int nMap[MAX][MAX] = { 0 };
int dx[] = { -1,1,0,0 };
int dy[] = { 0,0,-1,1 };
int nAnswer = 0;


void ClockRotate(int nNum)
{
	int nCopyMap[MAX] = { 0 };

	for (int j = 1; j <= M; j++)
	{
		nCopyMap[j] = nMap[nNum][j];
	}

	for (int j = 2; j <= M; j++)
	{
		nMap[nNum][j] = nCopyMap[j - 1];
	}
	nMap[nNum][1] = nCopyMap[M];
}

void CounterClockRotate(int nNum)
{
	int nCopyMap[MAX] = { 0 };

	for (int j = 1; j <= M; j++)
	{
		nCopyMap[j] = nMap[nNum][j];
	}

	for (int j = 1; j < M; j++)
	{
		nMap[nNum][j] = nCopyMap[j + 1];
	}
	nMap[nNum][M] = nCopyMap[1];
}

void Rotate_Process(int x, int nDir, int k)
{
	int Multiple = 0;
	int nNum = 1;
	k = k % M;
	while (true)
	{
		Multiple++;
		nNum = x * Multiple;
		if (nNum > N) break;

		for (int Time = 0; Time < k; Time++)
		{
			if (nDir == 0) //시게방향
			{
				ClockRotate(nNum);
			}
			else if (nDir ==1) //반시계방향
			{
				CounterClockRotate(nNum);
			}
		}
	}
}


bool BFS(int nRow, int nCol)
{
	bool Flag = false;
	bVisited[nRow][nCol] = true;
	
	queue <pair<int, int>> Que;
	Que.push(make_pair(nRow, nCol)); 

	int nCurRow, nCurCol, nNextRow, nNextCol;

	int nNum = nMap[nRow][nCol];

	while(!Que.empty())
	{
		nCurRow = Que.front().first; 
		nCurCol = Que.front().second;
		Que.pop();

		for (int i = 0; i <= 3; i++)
		{
			nNextRow = nCurRow + dy[i];
			nNextCol = nCurCol + dx[i];
			
			if (nNextCol > M) nNextCol = 1;
			else if (nNextCol <= 0) nNextCol = M;

			if (nNextRow <= 0 || nNextRow > N) continue;
			if (nMap[nNextRow][nNextCol] == nNum && bVisited[nNextRow][nNextCol] == false)
			{
				Flag = true;
				bVisited[nNextRow][nNextCol] = true;
				Que.push(make_pair(nNextRow, nNextCol));
				nMap[nRow][nCol] = 0;
				nMap[nNextRow][nNextCol] = 0;
			}
		}

	}

	return Flag;

}


void Solve()
{
	for (int nTime = 0; nTime < T; nTime++)
	{

		for (int i = 1; i <= N; i++)
		{
			for (int j = 1; j <= M; j++)
			{
				bVisited[i][j] = false;
			}
		}

		int x = Vec[nTime].x;
		int nDir = Vec[nTime].nDir;
		int k = Vec[nTime].k;
		bool Flag = false;

		Rotate_Process(x, nDir, k);

		for (int i = 1; i <= N; i++)
		{
			for (int j = 1; j <= M; j++)
			{
				if (nMap[i][j] == 0) continue;
				if (BFS(i, j) == true)
				{
					Flag = true;
				}
			}
		}

		int nNum = 0;
		int nCount = 0;
		float Avg = 0.0;
		if (Flag == false)
		{
			for (int i = 1; i <= N; i++)
			{
				for (int j = 1; j <= M; j++)
				{
					if (nMap[i][j] != 0)
					{
						nNum += nMap[i][j];
						nCount++;
					}
				}
			}

			Avg = float(nNum) / float(nCount);


			for (int i = 1; i <= N; i++)
			{
				for (int j = 1; j <= M; j++)
				{
					if (nMap[i][j] == 0) continue;

					if (nMap[i][j] > Avg)
					{
						nMap[i][j]--;
					}
					else if (nMap[i][j] < Avg)
					{
						nMap[i][j]++;
					}
				}
			}


		}
		
	}


	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= M; j++)
		{
			nAnswer += nMap[i][j];
		}
	}


}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif
	cin >> N >> M >> T;

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= M; j++)
		{
			cin >> nMap[i][j];
		}
	}

	Info Input;

	for (int i = 0; i < T; i++)
	{
		cin >> Input.x >> Input.nDir >> Input.k;
		Vec.push_back(Input);
	}

	Solve();

	cout << nAnswer << "\n";

	return 0;
}
