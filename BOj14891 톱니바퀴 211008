//BOj14891 톱니바퀴 211008

//문제
//https://www.acmicpc.net/problem/14891

//해설
//

#define _CRT_SECURE_NO_WARNINGS
#define MAX 9

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct Info
{
	int nNum;
	int nDir;
};

int nMap[5][10] = { 0 };
int nCopyMap[5][10] = { 0 };
bool bVisited[5] = { 0 };
int dx[] = { -1,1 };
int K;
vector <Info> Vec;
int nAnswer = 0;
int nStartPos = 3;
int nEndPos = 7;

void Rotate(int nNum, int nDir)
{
	if (nDir == 1) //시계방향
	{
		for (int i = 2; i <= 8; i++)
		{
			nMap[nNum][i] = nCopyMap[nNum][i-1];
		}
		nMap[nNum][1] = nCopyMap[nNum][8];
	}
	else if (nDir == -1) //반시계방향
	{
		for (int i = 1; i <= 7; i++)
		{
			nMap[nNum][i] = nCopyMap[nNum][i + 1];
		}
		nMap[nNum][8] = nCopyMap[nNum][1];
		
	}


}

void BFS(int nNum, int nDir)
{
	queue <pair<int,int>> Que;
	Que.push(make_pair(nNum,nDir));
	bVisited[nNum] = true;

	int nCurNum, nCurDir, nNextNum, nNextDir;

	while (!Que.empty())
	{
		nCurNum = Que.front().first;
		nCurDir = Que.front().second;
		Que.pop();

		Rotate(nCurNum, nCurDir);

		for (int i = 0; i <= 1; i++)
		{
			int nNextNum = nCurNum + dx[i];

			if (nNextNum <= 0 || nNextNum >= 5) continue;
			if (bVisited[nNextNum] == true) continue;

			if (nNextNum > nCurNum)
			{
				if (nCopyMap[nCurNum][nStartPos] != nCopyMap[nNextNum][nEndPos])
				{
					bVisited[nNextNum] = true;
					Que.push(make_pair(nNextNum, nCurDir*-1));
				}

			}
			else if (nNextNum < nCurNum)
			{
				if (nCopyMap[nCurNum][nEndPos] != nCopyMap[nNextNum][nStartPos])
				{
					bVisited[nNextNum] = true;
					Que.push(make_pair(nNextNum, nCurDir*-1));
				}
			}
		}
	}


}


void Init()
{
	for(int i = 1; i<=4; i++)
	{
		bVisited[i] = false;
	}

	for (int i = 1; i <= 4; i++)
	{
		for (int j = 1; j <= 8; j++)
		{
			nCopyMap[i][j] = nMap[i][j];
		}
	}

}

void Solve()
{
	for (int nTime = 0; nTime < K; nTime++)
	{
		Init();
		int nNum = Vec[nTime].nNum;
		int nDir = Vec[nTime].nDir;

		BFS(nNum, nDir);


	}

	//점수 시퀀스 필요
	if (nMap[1][1] == 1) nAnswer += 1;
	if (nMap[2][1] == 1) nAnswer += 2;
	if (nMap[3][1] == 1) nAnswer += 4;
	if (nMap[4][1] == 1) nAnswer += 8;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif
	int a = 0;
	char cInput;
	for (int i = 1; i <= 4; i++)
	{
		for (int j = 1; j <= 8; j++) 
		{
			cin >> cInput;
			if (cInput == '1')
			{
				nMap[i][j] = 1;
			}
			else if (cInput == '0')
			{
				nMap[i][j] = 0;
			}
		}
	}

	cin >> K;
	Info Input;
	for (int i = 0; i < K; i++)
	{
		cin >> Input.nNum >> Input.nDir;
		Vec.push_back(Input);
	}

	Solve();

	cout << nAnswer << "\n";

	return 0;
}
