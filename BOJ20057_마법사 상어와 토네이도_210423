//BOJ20057 마법사 상어와 토네이도

//문제
//https://www.acmicpc.net/problem/20057

//해설
//

/*
서남동북 방향으로 DFS 진행
2번 진행할 때 마다 움직이는 길이 늘려줌 (단, N == 늘어난 길이 같을 시) 움직이는 거리는 -1, 한번만 움직이고 Return

4개 배열 미리 만들어 놓고 모래량 업데이트
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
int N;
int nMap[506][506] = { 0 };
int dx[] = { -1,0,1,0 }; // 서남동북
int dy[] = { 0,1,0,-1 };

void CheckSand()
{
	int Result = 0, ToTalCount = 0, nMapCount = 0;
	for (int i = 0; i < N + 4; i++)
	{
		for (int j = 0; j < N + 4; j++)
		{
			ToTalCount += nMap[i][j];
			
		}
	}

	for (int i = 2; i < N+2 ; i++)
	{
		for (int j = 2; j < N+2 ; j++)
		{
			nMapCount += nMap[i][j];
		}
	}

	Result = ToTalCount - nMapCount;

	cout << Result << "\n";
}

void MoveSand(int nRow, int nCol, int nDir)
{
	int one, two, five, seven, ten, alpha;

	one = nMap[nRow][nCol] * 0.01;
	two = nMap[nRow][nCol] * 0.02;
	five = nMap[nRow][nCol] * 0.05;
	seven = nMap[nRow][nCol] * 0.07;
	ten = nMap[nRow][nCol] * 0.1;
	alpha = nMap[nRow][nCol] - one * 2 - two * 2 - seven * 2 - ten * 2 - five;
	if (alpha < 0) alpha = 0;

	if (nDir == 0) //서
	{
		nMap[nRow - 2][nCol] += nMap[nRow][nCol] * 0.02;

		nMap[nRow - 1][nCol-1] += nMap[nRow][nCol] * 0.1;
		nMap[nRow - 1][nCol] += nMap[nRow][nCol] * 0.07;
		nMap[nRow - 1][nCol+1] += nMap[nRow][nCol] * 0.01;

		nMap[nRow][nCol -2] += nMap[nRow][nCol] * 0.05;

		nMap[nRow + 1][nCol - 1] += nMap[nRow][nCol] * 0.1;
		nMap[nRow + 1][nCol] += nMap[nRow][nCol] * 0.07;
		nMap[nRow + 1][nCol + 1] += nMap[nRow][nCol] * 0.01;

		nMap[nRow + 2][nCol] += nMap[nRow][nCol] * 0.02;

		nMap[nRow][nCol - 1] += alpha;

	}
	else if (nDir == 1) //남
	{
		nMap[nRow - 1][nCol - 1] += one;
		nMap[nRow - 1][nCol + 1] += one;
		
		nMap[nRow][nCol - 2] += two;
		nMap[nRow][nCol - 1] += seven;
		nMap[nRow][nCol + 1] += seven;
		nMap[nRow][nCol + 2] += two;

		nMap[nRow + 1][nCol - 1] += ten;
		nMap[nRow + 1][nCol + 1] += ten;

		nMap[nRow + 2][nCol] += five;
		
		nMap[nRow + 1][nCol] += alpha;

	}
	else if (nDir == 2) // 동
	{
		nMap[nRow - 2][nCol] += nMap[nRow][nCol] * 0.02;

		nMap[nRow - 1][nCol + 1] += nMap[nRow][nCol] * 0.1;
		nMap[nRow - 1][nCol] += nMap[nRow][nCol] * 0.07;
		nMap[nRow - 1][nCol - 1] += nMap[nRow][nCol] * 0.01;

		nMap[nRow][nCol + 2] += nMap[nRow][nCol] * 0.05;

		nMap[nRow + 1][nCol + 1] += nMap[nRow][nCol] * 0.1;
		nMap[nRow + 1][nCol] += nMap[nRow][nCol] * 0.07;
		nMap[nRow + 1][nCol - 1] += nMap[nRow][nCol] * 0.01;

		nMap[nRow + 2][nCol] += nMap[nRow][nCol] * 0.02;

		nMap[nRow][nCol + 1] += alpha;

	}
	else if (nDir == 3) //북
	{
		nMap[nRow + 1][nCol - 1] += one;
		nMap[nRow + 1][nCol + 1] += one;

		nMap[nRow][nCol - 2] += two;
		nMap[nRow][nCol - 1] += seven;
		nMap[nRow][nCol + 1] += seven;
		nMap[nRow][nCol + 2] += two;

		nMap[nRow - 1][nCol - 1] += ten;
		nMap[nRow - 1][nCol + 1] += ten;

		nMap[nRow - 2][nCol] += five;

		nMap[nRow - 1][nCol] += alpha;
	}
	
	//자기자신은 지우기
	nMap[nRow][nCol] = 0;
}

void DepthFirstSearch(int nRow, int nCol, int nDir, int TurnCount, int ProcessCount)
{
	int nNextRow, nNextCol;
	if (ProcessCount == N)
	{
		for (int i = 1; i <= ProcessCount-1; i++)
		{
			nNextRow = nRow + dy[nDir] * i;
			nNextCol = nCol + dx[nDir] * i;
			MoveSand(nNextRow, nNextCol, nDir);
		}
		CheckSand();
		return;
	}

	for (int i = 1; i <= ProcessCount; i++)
	{
		nNextRow = nRow + dy[nDir] * i;
		nNextCol = nCol + dx[nDir] * i;
		MoveSand(nNextRow, nNextCol, nDir);
	}
	
	if ((TurnCount ) % 2 == 0) //길이 더 증가
	{
		DepthFirstSearch(nNextRow, nNextCol, (nDir + 1) % 4, 1, ProcessCount + 1);
	}
	else if ((TurnCount ) % 2 == 1)
	{
		DepthFirstSearch(nNextRow, nNextCol, (nDir + 1) % 4, TurnCount+1, ProcessCount);
	}
	

}

int main()
{
	freopen("input.txt", "r", stdin);
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> nMap[i+2][j+2];
		}
	}

	int Center = (N + 1) / 2 -1;
	DepthFirstSearch(Center+2, Center+2,0,1,1);
	return 0;
}
