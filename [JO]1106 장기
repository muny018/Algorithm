#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <queue>
using namespace std; 

int N, M, SrcRow, SrcCol, DstRow, DstCol;
int nMap[1001][1001] = { 0 };
bool bVisited[1001][1001] = { 0 };
int nAnswer = 0;
int dx[] = { -1,1,2,2,1,-1,-2,-2 };
int dy[] = { -2,-2,-1,1,2,2,1,-1 };

void Solve()
{
	queue <pair<int, int>> Que;
	Que.push(make_pair(SrcRow, SrcCol));
	bVisited[SrcRow][SrcCol] = true;

	int nCurRow, nCurCol, nNextRow, nNextCol;
	int nQueSize = 0;
	int cnt = 0;
	while (!Que.empty())
	{
		nQueSize = Que.size();
		cnt++;
		for (int nTime = 1; nTime <= nQueSize; nTime++)
		{
			nCurRow = Que.front().first;
			nCurCol = Que.front().second;
			Que.pop();

			for (int idx = 0; idx < 8; idx++)
			{
				nNextRow = nCurRow + dy[idx];
				nNextCol = nCurCol + dx[idx];
				
				if (nNextRow <= 0 || nNextRow > N || nNextCol <= 0 || nNextCol > M) continue;
				if (bVisited[nNextRow][nNextCol] == true) continue;
				
				if( nNextRow == DstRow && nNextCol == DstCol)
				{
					nAnswer = cnt;
					return;
				}
				else
				{
					bVisited[nNextRow][nNextCol] = true;
					Que.push(make_pair(nNextRow, nNextCol));
				}
			}
		}

	}
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif

	cin >> N >> M;
	cin >> SrcRow >> SrcCol >> DstRow >> DstCol;

	Solve();

	cout << nAnswer << "\n";

	return 0;
}
