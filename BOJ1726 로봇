//BOJ 1726 로봇

//문제
//https://www.acmicpc.net/problem/1726

//해설
//

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int N, M;
int nMap[101][101] = { 0 };
bool bVisited[101][101][5] = { 0 };
int dx[] = { 1,-1,0,0 };
int dy[] = { 0,0,1,-1 };
int nAnswer = 99999999;
vector <pair< pair<int, int>, int >> Vec;

struct Info
{
	int nRow;
	int nCol;
	int nDir;
	int nOrderCount;
};

int DirCheck(int nNextDir, int nCurDir)
{
	int Diff = 0;
	if (nCurDir == 0) //동
	{
		if (nNextDir == 0) Diff = 0;
		else if (nNextDir == 1) Diff = 2;
		else Diff = 1;
	}
	else if (nCurDir == 1) //서
	{
		if (nNextDir == 1) Diff = 0;
		else if (nNextDir == 0) Diff = 2;
		else Diff = 1;
	}
	else if (nCurDir == 2) //남
	{
		if (nNextDir == 2) Diff = 0;
		else if (nNextDir == 3) Diff = 2;
		else Diff = 1;
	}
	else if (nCurDir == 3) //북
	{
		if (nNextDir == 3) Diff = 0;
		else if (nNextDir == 2) Diff = 2;
		else Diff = 1;
	}

	return Diff;
}

void Solve()
{
	int nNextRow, nNextCol, nNextDir, nCurRow, nCurCol, Diff, nCurDir, nCurOrderCount, nCurForwardCount;
	int nCurDepth, nNextDepth;
	Info HorseInfo;
	Info NextInfo;

	int DstRow = Vec[1].first.first;
	int DstCol = Vec[1].first.second;
	int DstDir = Vec[1].second;

	queue <Info> Que;
	HorseInfo.nRow = Vec[0].first.first;
	HorseInfo.nCol = Vec[0].first.second;
	HorseInfo.nDir = Vec[0].second;
	HorseInfo.nOrderCount = 0;
	Que.push(HorseInfo);
	bVisited[HorseInfo.nRow][HorseInfo.nCol][HorseInfo.nDir] = true;

	while (!Que.empty())
	{
		HorseInfo = Que.front();
		Que.pop();
		nCurDir = HorseInfo.nDir;
		nCurRow = HorseInfo.nRow;
		nCurCol = HorseInfo.nCol;
		nCurOrderCount = HorseInfo.nOrderCount;

		if (nCurDir == DstDir && nCurRow == DstRow && nCurCol == DstCol)
		{
			if (nAnswer > nCurOrderCount) nAnswer = nCurOrderCount;
		}

		//전진
		for (int nIdx = 1; nIdx <= 3; nIdx++)
		{
			nNextRow = nCurRow + dy[nCurDir] * nIdx;
			nNextCol = nCurCol + dx[nCurDir] * nIdx;

			if (nNextRow < 0 || nNextRow >= N || nNextCol < 0 || nNextCol >= M) break;
			if (nMap[nNextRow][nNextCol] >= 1) break;
			if (bVisited[nNextRow][nNextCol][nCurDir]) continue;
			bVisited[nNextRow][nNextCol][nCurDir] = true;
			NextInfo.nRow = nNextRow;
			NextInfo.nCol = nNextCol;
			NextInfo.nDir = nCurDir;
			NextInfo.nOrderCount = nCurOrderCount + 1;
			Que.push(NextInfo);
		}

		//방향 전환
		for (int nIdx = 1; nIdx < 4; nIdx++)
		{
			nNextDir = nCurDir + nIdx;
			if (nNextDir >= 4) nNextDir = nNextDir % 4;

			Diff = DirCheck(nNextDir, nCurDir);

			NextInfo.nOrderCount = nCurOrderCount + Diff;
			NextInfo.nRow = nCurRow;
			NextInfo.nCol = nCurCol;
			NextInfo.nDir = nNextDir;
			if (bVisited[nCurRow][nCurCol][nNextDir]) continue;
	
			bVisited[nCurRow][nCurCol][nNextDir] = true;
			Que.push(NextInfo);
		}


	}
}

int main()
{
	freopen("input.txt", "r", stdin);
	cin >> N >> M;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> nMap[i][j];
		}
	}

	int a, b, c;
	for (int i = 0; i < 2; i++)
	{
		cin >> a >> b >> c;
		a--;
		b--;
		c--;
		Vec.push_back(make_pair(make_pair(a, b), c));
	}

	Solve();

	cout << nAnswer << "\n";

	return 0;
}
