//BOJ3190 뱀 211011

//문제
//https://www.acmicpc.net/problem/3190

//해설
//https://www.acmicpc.net/board/view/40546

#define _CRT_SECURE_NO_WARNINGS
#define MAX 102

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int nMap[MAX][MAX] = { 0 };
bool bVisited[MAX][MAX] = { false };
int N, K, L;
int dy[] = { 0,-1,0,1,0 }; //북 동 남 서
int dx[] = { 0, 0,1,0,-1 };
vector <pair<int, int>> Vec;
int nAnswer = 0;

void Solve()
{
	queue <pair<int, int>> Que;

	int nTime = 0;

	int nCurRow, nCurCol, nNextRow, nNextCol, nCurDir, nVecDir;
	nCurRow = 1;
	nCurCol = 1;
	nCurDir = 2;
	bVisited[nCurRow][nCurCol] = true;
	int nIdx = 0;
	int nVecSize = Vec.size();
	int nStartRow = 1;
	int nStartCol = 1;
	int nDir;
	Que.push(make_pair(nCurRow, nCurCol));

	while (true)
	{
		nTime++;

		nNextRow = nCurRow + dy[nCurDir];
		nNextCol = nCurCol + dx[nCurDir];

		if (bVisited[nNextRow][nNextCol] == true || nNextRow <=0 ||nNextRow > N ||nNextCol <=0 || nNextCol >N)
		{
			nAnswer = nTime;
			return;
		}

		bVisited[nNextRow][nNextCol] = true;
		nCurRow = nNextRow;
		nCurCol = nNextCol;
		Que.push(make_pair(nNextRow, nNextCol));

		if (nMap[nNextRow][nNextCol] == 0)
		{
			int nRow = Que.front().first;
			int nCol = Que.front().second;
			Que.pop();
			bVisited[nRow][nCol] = false;
		}
		else if (nMap[nNextRow][nNextCol] >= 1)
		{
			nMap[nNextRow][nNextCol] = 0;
		}

		//방향 설정
		if (nIdx < nVecSize && nTime == Vec[nIdx].first)
		{
			nVecDir = Vec[nIdx].second;
			if (nVecDir == -1)
			{
				nCurDir--;
				if (nCurDir <= 0) nCurDir = 4;
			}
			else if (nVecDir == 1)
			{
				nCurDir++;
				if (nCurDir > 4) nCurDir = 1;
			}
			nIdx++;
		}

		
	}

}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif
	cin >> N >> K;

	int nRow, nCol;
	for (int i = 0; i < K; i++) 
	{
		cin >> nRow >> nCol;
		nMap[nRow][nCol] = 1;
	}
	cin >> L; 

	int nTime; char cDir; int nDir;
	for (int i = 0; i < L; i++)
	{
		cin >> nTime >> cDir;
		if (cDir == 'L') nDir = -1;
		else if (cDir == 'D') nDir = 1; 
		Vec.push_back(make_pair(nTime, nDir));
	}

	Solve();

	cout << nAnswer << "\n";

	return 0;
}
