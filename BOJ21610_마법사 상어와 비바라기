//BOJ21610 마법사 상어와 비바라기

//문제
//https://www.acmicpc.net/problem/21610

//해설
//

/*
for M
1)구름이동, 비가 1 내린다. bVisiited 활성화  (경계선 없음)
2) 비내린곳 vec에 넣어두고, 대각선 방향에 물웅덩이 갯수만큼 자기자신 +  (경계선 있음)
3) 물의 양이 2 이상이고 bVisited false 인곳에서 물양 -2, 구름 생김 
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
using namespace std; 

struct Info
{
	int nDir;
	int nSpeed;
};

int nMap[51][51] = { 0 };
int nCopyMap[51][51] = { 0 };
bool bVisited[51][51] = { false };
int N, M;
Info nCloudMap[101] = { 0 };
vector <pair<int, int>> Vec;
vector <pair<int, int>> NewVec;
int dx[] = { -1,-1,0,1,1,1,0,-1 };
int dy[] = { 0,-1,-1,-1,0,1,1,1 };
int Cdx[] = { -1,1,1,-1 };
int Cdy[] = { -1,-1,1,1 };
int nAnswer = 0;

void MakeCloud()
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (nMap[i][j] >= 2 && bVisited[i][j] == false)
			{
				nMap[i][j] = nMap[i][j] - 2;
				Vec.push_back(make_pair(i, j));
			}
		}
	}

}

void MoveCloud(int Time)
{
	int nDir = nCloudMap[Time].nDir;
	int nSpeed = nCloudMap[Time].nSpeed;

	int nVecSize = Vec.size(); 
	int nCurRow, nCurCol, nNextRow, nNextCol;
	int Speed = nSpeed;

	for (int i = 0; i < nVecSize; i++)
	{
		nCurRow = Vec[i].first;
		nCurCol = Vec[i].second;
		Speed = nSpeed;

		
		nNextRow = nCurRow;
		nNextCol = nCurCol; 

		while (Speed--)
		{
			nNextRow = nNextRow + dy[nDir];
			nNextCol = nNextCol + dx[nDir];

			if (nNextRow < 0) nNextRow = N - 1;
			else if (nNextRow >= N) nNextRow = 0;

			if (nNextCol < 0) nNextCol = N - 1;
			else if (nNextCol >= N) nNextCol = 0;
		}

		nMap[nNextRow][nNextCol]++; 
		bVisited[nNextRow][nNextCol] = true;
		NewVec.push_back(make_pair(nNextRow, nNextCol));
	}

	Vec.clear();

	int NewVecSize = NewVec.size();

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			nCopyMap[i][j] = nMap[i][j];
		}
	}

	int Count = 0;
	for (int i = 0; i < NewVecSize; i++)
	{
		nCurRow = NewVec[i].first;
		nCurCol = NewVec[i].second;
		Count = 0;
		for (int nIdx = 0; nIdx < 4; nIdx++)
		{
			nNextRow = nCurRow + Cdy[nIdx];
			nNextCol = nCurCol + Cdx[nIdx];

			if (nNextRow < 0 || nNextRow >= N || nNextCol < 0 || nNextCol >= N) continue;
			if (nCopyMap[nNextRow][nNextCol] == 0) continue;
			Count++;
		}

		nMap[nCurRow][nCurCol] += Count;

	}



}

void Solve()
{
	for (int nTime = 0; nTime < M; nTime++)
	{
		NewVec.clear();
		for (int i = 0; i < N; i++)
		{
			
			for (int j = 0; j < N; j++)
			{
				bVisited[i][j] = 0;
			}
		}

		//
		MoveCloud(nTime);
	
		MakeCloud();


	}

	//물웅덩이 갯수 필요
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (nMap[i][j] == 0) continue;
			nAnswer += nMap[i][j];
		}
	}


}

int main()
{
	freopen("input.txt", "r", stdin);
	cin >> N >> M;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> nMap[i][j];
		}
	}

	for (int i = 0; i < M; i++)
	{
		cin >> nCloudMap[i].nDir >> nCloudMap[i].nSpeed;
		nCloudMap[i].nDir--;
	}

	Vec.push_back(make_pair(N - 1, 0));
	Vec.push_back(make_pair(N - 2, 0));
	Vec.push_back(make_pair(N - 1, 1));
	Vec.push_back(make_pair(N - 2, 1));

	Solve();

	cout << nAnswer << "\n";

	return 0;
}
