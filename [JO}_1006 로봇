#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <queue>
using namespace std;

int nMap[110][110] = { 0 };
int nVisited[110][110] = { 0 };
int dx[] = { -1,0,1,0 };
int dy[] = { 0,-1,0,1 };
int nAnswer = 9999999;
int N, M;

struct Info {
	int nRow;
	int nCol;
	int nDir;
	int nTime;
};
Info StartInfo;
Info DstInfo;


void BreadthFirstSearch()
{
	queue <Info> Que;
	Info NextInfo;
	Que.push(StartInfo);
	nVisited[StartInfo.nRow][StartInfo.nCol] = 1;

	int nCurRow, nCurCol, nNextRow, nNextCol;
	int nCurDir, nNextDir;
	int nCurTime, nNextTime;
	while (!Que.empty())
	{
		nCurRow = Que.front().nRow;
		nCurCol = Que.front().nCol;
		nCurDir = Que.front().nDir;
		nCurTime = Que.front().nTime;
		Que.pop();

		nNextDir = nCurDir;
		nNextTime = nCurTime;

		//회전
		for (int i = 1; i <= 4; i++)
		{
			nNextDir++;
			if (nNextDir >= 4) nNextDir = 0;

			if (i == 3) nNextTime = nCurTime + 1;
			else if (i == 4) nNextTime = nCurTime;
			else nNextTime++;

			//도착 점검
			if (nCurRow == DstInfo.nRow && nCurCol == DstInfo.nCol && nNextDir == DstInfo.nDir)
			{
				if (nAnswer > nNextTime) nAnswer = nNextTime;
			}

			//전진
			for (int j = 1; j <= 3; j++)
			{
				nNextRow = nCurRow + dy[nNextDir] * j;
				nNextCol = nCurCol + dx[nNextDir] * j;
				if (nNextRow < 0 || nNextRow >= N || nNextCol < 0 || nNextCol >= M) break;
				if (nMap[nNextRow][nNextCol] == 1 ) break;

				if (nVisited[nNextRow][nNextCol] > nNextTime + 1)
				{
					NextInfo.nRow = nNextRow;
					NextInfo.nCol = nNextCol;
					NextInfo.nDir = nNextDir;
					NextInfo.nTime = nNextTime + 1;
					nVisited[nNextRow][nNextCol] = NextInfo.nTime;
					Que.push(NextInfo);
				}

			}

		}

	}

}

int DirCheck(int nDir)
{

	if (nDir == 1) return 2;
	else if (nDir == 2) return 0;
	else if (nDir == 3) return 3;
	else if (nDir == 4) return 1;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif
	cin >> N >> M;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> nMap[i][j];
			nVisited[i][j] = 9999999;
		}
	}

	StartInfo.nTime = 0;
	cin >> StartInfo.nRow >> StartInfo.nCol >> StartInfo.nDir;
	StartInfo.nRow--;
	StartInfo.nCol--;
	StartInfo.nDir = DirCheck(StartInfo.nDir);



	DstInfo.nTime = 0;
	cin >> DstInfo.nRow >> DstInfo.nCol >> DstInfo.nDir;
	DstInfo.nRow--;
	DstInfo.nCol--;
	DstInfo.nDir = DirCheck(DstInfo.nDir);

	BreadthFirstSearch();

	cout << nAnswer << "\n";

	return 0;
}
