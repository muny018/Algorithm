//BOJ14503 로봇청소기 211009

//문제
// https://www.acmicpc.net/problem/14503

//해설
//

#define _CRT_SECURE_NO_WARNINGS
#define MAX 52

#include <iostream>
#include <queue>
using namespace std; 

struct Info
{
	int nRow;
	int nCol;
	int nDir;
};

int dx[] = { 0,1,0,-1 }; //북 동 남 서
int dy[] = { -1,0,1,0 }; 
int N, M;
int nMap[MAX][MAX] = { 0 };
int nAnswer = 0;
queue <Info> Que;

/*
int CheckState(int nCurRow, int nCurCol, int nCurDir, int nCount)
{
	if (nCount >= 4)
	{
		return 3;
	}

	Info Robot;
	int nNextDir = nCurDir - 1;
	if (nNextDir < 0) nNextDir = 3;

	int nNextRow = nCurRow + dy[nNextDir];
	int nNextCol = nCurCol + dx[nNextDir];

	if (nNextRow < 0 || nNextRow >= N || nNextCol < 0 || nNextCol >= M || nMap[nNextRow][nNextCol] !=0)
	{
		CheckState(nCurRow, nCurCol, nNextDir, nCount + 1);
	}
	else if (nMap[nNextRow][nNextCol] == 0)
	{
		nAnswer++;
		nMap[nNextRow][nNextCol] = 9;
		Robot.nRow = nNextRow;
		Robot.nCol = nNextCol;
		Robot.nDir = nNextDir;
		Que.push(Robot);
		return 1;
	}

}
*/

void BFS(int nRow, int nCol, int nDir)
{
	Info Robot;
	Robot.nRow = nRow;
	Robot.nCol = nCol;
	Robot.nDir = nDir;
	
	Que.push(Robot);
	nAnswer++;

	int nCurRow, nCurCol, nNextRow, nNextCol, nCurDir, nNextDir;
	
	int nCount = 0;
	int nCase = 0;
	while (!Que.empty())
	{
		nCount = 0;
		nCurRow = Que.front().nRow;
		nCurCol = Que.front().nCol;
		nCurDir = Que.front().nDir;
		Que.pop();
		nMap[nCurRow][nCurCol] = 9;

		while (true)
		{
			if (nCount >= 4)
			{
				nCase = 3;
				break;
			}

			Info Robot;
			int nNextDir = nCurDir - 1;
			if (nNextDir < 0) nNextDir = 3;

			int nNextRow = nCurRow + dy[nNextDir];
			int nNextCol = nCurCol + dx[nNextDir];

			if (nNextRow < 0 || nNextRow >= N || nNextCol < 0 || nNextCol >= M || nMap[nNextRow][nNextCol] != 0)
			{
				nCurDir = nNextDir;
				nCount++;
			}
			else if (nMap[nNextRow][nNextCol] == 0)
			{
				nAnswer++;
				nMap[nNextRow][nNextCol] = 9;
				Robot.nRow = nNextRow;
				Robot.nCol = nNextCol;
				Robot.nDir = nNextDir;
				Que.push(Robot);
				nCase = 1;
				break;
			}
		}

		if (nCase == 3)
		{
			nNextDir = nCurDir - 2;
			if (nNextDir == -1) nNextDir = 3;
			else if (nNextDir == -2) nNextDir = 2;

			nNextRow = nCurRow + dy[nNextDir];
			nNextCol = nCurCol + dx[nNextDir];

			if (nNextRow < 0 || nNextRow >= N || nNextCol < 0 || nNextCol >= M || nMap[nNextRow][nNextCol] == 1)
			{
				return;
			}
			else if (nMap[nNextRow][nNextCol] != 1)
			{
				Robot.nRow = nNextRow;
				Robot.nCol = nNextCol;
				Robot.nDir = nCurDir;
				Que.push(Robot);
			}
		}
	}



}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif
	cin >> N >> M;

	int nRow, nCol, nDir;
	cin >> nRow >> nCol >> nDir;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> nMap[i][j];
		}
	}

	

	BFS(nRow, nCol, nDir);

	cout << nAnswer << "\n";
	return 0;
}
