/*
Struct 만들어서 InputVec에 다 집어 넣고
완전탐색으로 (하나, 하나) 거리 비교

- 유클리드 기하학 조건 <= R^2 에 들어오면 집합벡터에 넣기
	- 단 아래 3가지 조건을 따져서 넣어야함
		1. 비교군 2개 모두 은하에 등록된 적 없음. 은하 신규 등록
		2. 비교군 중 1개가 이미 등록되어 있음 -> 나머지 하나를 기존 등록된 은하에 넣어줘야함.
		3. ★ 둘 다 각자 다른 은하에 등록되어 있음 -> 두개 은하 집단을 하나로 만들어줘야함. 
			-> 비교군 (하나, 하나)만 생각할게 아니라 각자 은하에 등록된 모든 별들을 하나의 은하로 Merge 필요함
*/

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
using namespace std;

#define MAXSize 200

struct Info {
	int nRow;
	int nCol;
	int nIndex;
};

int T, N, R;
int nAnswer = 0;
vector <pair<int, int>> InputVec;
vector <Info> GalaxyVec[MAXSize];    // <- 은하를 등록해놓는 1차원 벡터 "행렬"
int nMap[MAXSize] = { 0 };           // <- 각 별들이 어느 은하에 속해있는지 기록해둠
				// 나중에 은하 Merge할 때 일일이 벡터 검색해서 제거하면 시간초과나기 때문에 미리 기록해둠
				// MAXSize = 200 으로 정의 했는데, 사실 N 조건이 100이하이기 때문에 100이하여도 상관없으나, 널널하게 줌
				// 시간조건이 5초이내, 메모리가 256MB 여서 사실상 구현만 되면 별다른 문제 없을거라 판단.

void Solve()
{
	Info FirstInfo, SecInfo, TempInfo;
	int nDist, nProcRow, nProcCol;
	int nGalaxyIndex = 1; // 새로운 은하에 등록할 때 사용함. 
	int nAlreadyIndex, nMinIndex, nAnotherIndex, nVecSize;
	

	//입력 벡터에 받은 은하를 모두 탐색함, 중복되는 경우를 피하기 위해 i번쨰 select 하면 비교는 i번째 이후 애들만 비교함.
	for (int i = 0; i < N - 1; i++)
	{
		for (int j = i + 1; j < N; j++)
		{
			FirstInfo.nRow = InputVec[i].first;
			FirstInfo.nCol = InputVec[i].second;

			SecInfo.nRow = InputVec[j].first;
			SecInfo.nCol = InputVec[j].second;

			nProcRow = (FirstInfo.nRow - SecInfo.nRow) * (FirstInfo.nRow - SecInfo.nRow);
			nProcCol = (FirstInfo.nCol - SecInfo.nCol) * (FirstInfo.nCol - SecInfo.nCol);
			nDist = nProcRow + nProcCol;

			if (nDist <= R*R)
			{
				//#1 두개 다 은하에 등록된 적 없음. 신규 등록
				if (nMap[i] == 0 && nMap[j] == 0)
				{
					FirstInfo.nIndex = nGalaxyIndex;
					SecInfo.nIndex = nGalaxyIndex;
					
					nMap[i] = nGalaxyIndex;
					nMap[j] = nGalaxyIndex;

					GalaxyVec[nGalaxyIndex].push_back(FirstInfo); //nGalaxyIndex 번 은하에 별 정보를 등록
					GalaxyVec[nGalaxyIndex].push_back(SecInfo);

					nGalaxyIndex++;
				}
				else if ( nMap[i] !=0 && nMap[i] == nMap[j]) 
				{
					//혹시나 같은 은하에 이미 속해 있으면 아무것도 안하고 패스 (밑에 If문에 걸려서 꼬일까봐 그냥 만들었음)
				}
				else if (nMap[i] != 0 && nMap[j] != 0) //#3 둘 다 은하에 등록되었으나, 같은 거리에 속해있음 (은하 Merge 필요)
				{
					//작은 쪽으로 Merge 해줌.. 근데 좀 더 이쁘게 함수로 짰으면 간단했을거 같은데.. 코드가 기네..
					if (nMap[i] < nMap[j])
					{
						nMinIndex = nMap[i];
						SecInfo.nIndex = nMinIndex;

						nAnotherIndex = nMap[j];
						nVecSize = GalaxyVec[nAnotherIndex].size();
						
						//다른 은하에 등록된 정보 소멸 및 작은 index 은하로 옮김
						for (int k = 0; k < nVecSize; k++)
						{
							TempInfo = GalaxyVec[nAnotherIndex].at(k); //다른 은하 벡터에 들어가 있는 정보 가져옴
							TempInfo.nIndex = nMinIndex;
							GalaxyVec[nMinIndex].push_back(TempInfo); // 기존 은하에 합침

							nMap[j] = nMinIndex;
						}

						GalaxyVec[nAnotherIndex].clear(); // 다른 은하 벡터 삭제

					}
					else
					{
						nMinIndex = nMap[j];
						SecInfo.nIndex = nMinIndex;

						nAnotherIndex = nMap[i];
						nVecSize = GalaxyVec[nAnotherIndex].size();

						//다른 은하에 등록된 정보 소멸 및 작은 index 은하로 옮김
						for (int k = 0; k < nVecSize; k++)
						{
							TempInfo = GalaxyVec[nAnotherIndex].at(k); //다른 은하 벡터에 들어가 있는 정보 가져옴
							TempInfo.nIndex = nMinIndex;
							GalaxyVec[nMinIndex].push_back(TempInfo); // 기존 은하에 합침

							nMap[i] = nMinIndex;
						}

						GalaxyVec[nAnotherIndex].clear(); // 다른 은하 벡터 삭제
					}
				}
				else if (nMap[i] != 0 || nMap[j] != 0) //#2 둘 중 하나는 은하에 등록된적 있음
				{
					if (nMap[i] != 0)
					{
						nAlreadyIndex = nMap[i];

						SecInfo.nIndex = nAlreadyIndex;
						nMap[j] = nAlreadyIndex;
						GalaxyVec[nAlreadyIndex].push_back(SecInfo);
					}
					else if (nMap[j] != 0)
					{
						nAlreadyIndex = nMap[j];
						FirstInfo.nIndex = nAlreadyIndex;
						nMap[i] = nAlreadyIndex;
						GalaxyVec[nAlreadyIndex].push_back(FirstInfo);
					}
				}
			}
		}
	}


	//은하 몇개?
	for (int i = 0; i < MAXSize; i++)
	{
		nVecSize = GalaxyVec[i].size();
		if (nVecSize > 0)
		{
			nAnswer++;
		}
	}

}

void Input()
{
	cin >> N >> R;
	int nRow, nCol;
	for (int i = 0; i < N; i++)
	{
		cin >> nRow >> nCol;
		InputVec.push_back(make_pair(nRow, nCol));
	}
}

void Init()
{
	nAnswer = 0;
	InputVec.clear();
	
	for (int i = 0; i < MAXSize; i++)
	{
		nMap[i] = 0;
		GalaxyVec[i].clear();
	}
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif 
	cin >> T;
	for (int nTestCase = 1; nTestCase <= T; nTestCase++)
	{
		//초기화
		Init();

		//입력
		Input();

		//풀이
		Solve();

		//출력
		cout << "#" << nTestCase << " " << nAnswer << "\n";
	}

	return 0;
}
